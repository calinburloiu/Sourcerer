<!--
 * Sourcerer: an infrastructure for large-scale source code analysis.
 * Copyright (C) by contributors. See CONTRIBUTORS.txt for full list.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 -->
<!-- @author Joel Ossher (jossher@uci.edu) -->
<!-- @author Sushil Bajracharya (bajracharya@gmail.com) -->
<!-- @author Calin-Andrei Burloiu (calin.burloiu[at]gmail[dot]com) -->
<project name="Sourcerer Infrastructure" basedir=".">
  <description>
    Build file for the Sourcerer Infrastructure.
  </description>
  <!-- There should be a different build location for each target,
       so that the jars don't contain unneeded files -->
  <property name="build" location="build" />
  <property name="build-java-tools-core" location="${build}/java-tools-core" />
  <property name="build-search-eval" location="${build}/search-eval" />
  <property name="build-search-server" location="${build}/search-server" />
  <property name="build-core-repomanager" location="${build}/core-repomanager" />
  <property name="build-codecrawler" location="${build}/codecrawler" />
  <property name="build-extractor" location="${build}/extractor" />
  <property name="build-machine-learning" location="${build}/machine-learning" />

  <property name="dist" location="dist" />

  <property name="utilities" location="../infrastructure/utilities/src" />
	<property name="component-clusterer" location="../infrastructure/tools/java/component-clusterer/src" />
  <property name="repository-manager" location="../infrastructure/tools/java/repository-manager/src" />
  <property name="model" location="../infrastructure/tools/java/model/src" />
	<property name="syntax-highlighter" location="../infrastructure/tools/java/syntax-highlighter/src" />
  <property name="database" location="../infrastructure/tools/java/database/src" />
  <property name="distributed-database"
      location="../infrastructure/tools/java/distributed-database/src" />
  <property name="distributed-repository-manager"
      location="../infrastructure/tools/java/distributed-repository-manager/src" />
  <property name="testing"
	  location="../testing/src" />
  <property name="search-eval" location="../infrastructure/apps/codesearch/src" />
  <property name="core-repository-manager" location="../infrastructure/tools/core/core-repository-manager/src" />
  <property name="search-server" location="../infrastructure/services/search-server/src" />
  <property name="solr-root" location="../infrastructure/services/solr-1.3-patched" />
  <property name="codecrawler" location="../infrastructure/tools/core/codecrawler/src" />
  <property name="file-server" location="../infrastructure/services/file-server/src" />
	<property name="famix-server" location="../infrastructure/services/famix-server/src" />
	<property name="code-browser" location="../infrastructure/apps/code-browser/src" />
  <property name="similarity-server" location="../infrastructure/services/similarity-server/src" />
  <property name="test-repo" location="../infrastructure/tools/java/extractor/test-repo" />
  <property name="lib" location="../lib" />
  <property name="extractor-bin" location="../infrastructure/tools/java/extractor/bin" />
  <property name="machine-learning" location="../infrastructure/tools/core/machine-learning/src" />
	<property name="website" location="../website" />
  
  <fileset id="lib.classpath" dir="${dist}/lib">
    <include name="*.jar" />
  </fileset>
  
  <manifestclasspath property="sourcerer-ddb.jar_classpath"
  	  jarfile="${dist}/sourcerer-ddb.jar">
    <classpath>
      <fileset refid="lib.classpath" />
      <pathelement path="${dist}/conf" />
    </classpath>
  </manifestclasspath>
	
  <manifestclasspath property="sourcerer-mapreduce.jar_classpath"
  	  jarfile="${dist}/sourcerer-mapreduce.jar">
    <classpath>
      <fileset refid="lib.classpath" />
      <pathelement path="${dist}/conf" />
    </classpath>
  </manifestclasspath>
	
	<manifestclasspath property="testing.jar_classpath"
	  	  jarfile="${dist}/testing.jar">
	    <classpath>
	      <fileset refid="lib.classpath" />
	      <pathelement path="${dist}/conf" />
	    </classpath>
	  </manifestclasspath>
  
  <manifestclasspath property="sourcerer-drepo.jar_classpath"
    	  jarfile="${dist}/sourcerer-drepo.jar">
      <classpath>
        <fileset refid="lib.classpath" />
        <pathelement path="${dist}/conf" />
      </classpath>
    </manifestclasspath>

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${dist}" />
  </target>

  <!-- Sourcerer java core -->
  <target name="init-java-tools-core" depends="init">
    <mkdir dir="${build-java-tools-core}" />
  </target>

  <target name="compile-java-tools-core" depends="init-java-tools-core">
    <!-- Compile everything -->
    <javac destdir="${build-java-tools-core}" debug="on" includeantruntime="false">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${lib}">
          <include name="**/servlet-api.jar" />
          <include name="**/zookeeper-3.4.3.jar" />
          <include name="**/slf4j-api-1.5.8.jar" />
          <include name="**/log4j-1.2.8.jar" />
          <include name="**/commons-cli-1.1.jar" />
          <include name="**/commons-logging-1.1.1.jar" />
          <include name="**/commons-io-1.4.jar" />
          <include name="**/slf4j-jcl-1.5.8.jar" />
          <include name="**/commons-lang-2.5.jar" />
          <include name="**/hbase-0.92.1.jar" />
          <include name="**/commons-configuration-1.6.jar" />
          <include name="**/hadoop-core-1.0.1.jar" />
          <include name="**/junit-4.3.jar" />
          <include name="**/jackson-mapper-asl-1.0.0.jar" />
        </fileset>
      </classpath>
      <src path="${utilities}" />
      <src path="${repository-manager}" />
      <src path="${model}" />
    	<src path="${syntax-highlighter}" />
      <src path="${database}" />
      <src path="${distributed-database}" />
      <src path="${distributed-repository-manager}" />
      <src path="${testing}" />
      <src path="${file-server}" />
    	<src path="${famix-server}" />
    	<src path="${code-browser}" />
      <src path="${component-clusterer}" />
    </javac>

    <!-- Copy the source -->
    <copy todir="${build-java-tools-core}">
      <fileset dir="${utilities}" includes="**/*.java" />
    </copy>
    <copy todir="${build-java-tools-core}">
      <fileset dir="${repository-manager}" includes="**/*.java" />
    </copy>
    <copy todir="${build-java-tools-core}">
      <fileset dir="${model}" includes="**/*.java" />
    </copy>
  	<copy todir="${build-java-tools-core}">
      <fileset dir="${syntax-highlighter}" includes="**/*.java" />
    </copy>
    <copy todir="${build-java-tools-core}">
      <fileset dir="${database}" includes="**/*.java" />
    </copy>
    <copy todir="${build-java-tools-core}">
          <fileset dir="${distributed-database}" includes="**/*.java" />
    </copy>
    <copy todir="${build-java-tools-core}">
      <fileset dir="${file-server}" includes="**/*.java" />
    </copy>
  	<copy todir="${build-java-tools-core}">
      <fileset dir="${famix-server}" includes="**/*.java" />
    </copy>
  	<copy todir="${build-java-tools-core}">
      <fileset dir="${code-browser}" includes="**/*.java" />
    </copy>
  	<copy todir="${component-clusterer}">
  	  <fileset dir="${component-clusterer}" includes="**/*.java" />
  	</copy>
    <unjar src="${lib}/mysql-connector-java-5.1.7-bin.jar" dest="${build-java-tools-core}" />
  </target>

  <!-- Package the individual jars -->
  <target name="sourcerer-lib" depends="compile-java-tools-core">
    <jar destfile="${dist}/sourcerer-lib.jar" basedir="${build-java-tools-core}" />
  </target>

  <target name="repo-tools" depends="compile-java-tools-core">
    <jar destfile="${dist}/repo-tools.jar" basedir="${build-java-tools-core}">
      <manifest>
        <attribute name="Main-Class" value="edu.uci.ics.sourcerer.repo.Main" />
      </manifest>
    </jar>
  </target>

  <target name="sourcerer-db" depends="compile-java-tools-core">
    <jar destfile="${dist}/sourcerer-db.jar" basedir="${build-java-tools-core}">
      <manifest>
        <attribute name="Main-Class" value="edu.uci.ics.sourcerer.db.tools.Main" />
      </manifest>
    </jar>
  </target>

  <target name="sourcerer-ddb" depends="compile-java-tools-core">
    <jar destfile="${dist}/sourcerer-ddb.jar" basedir="${build-java-tools-core}">
      <manifest>
        <attribute name="Class-Path" value="${sourcerer-ddb.jar_classpath}" />
        <attribute name="Main-Class" value="edu.nus.soc.sourcerer.ddb.tools.Main" />
      </manifest>
    </jar>
    <!-- File 'META-INF/INDEX.LIST' from the JAR prevents classpath manifest to be read.-->
    <exec executable="zip">
      <arg line="-d ${dist}/sourcerer-ddb.jar META-INF/INDEX.LIST" />
    </exec>
  </target>
	
  <target name="sourcerer-mapreduce" depends="compile-java-tools-core">
    <jar destfile="${dist}/sourcerer-mapreduce.jar" basedir="${build-java-tools-core}">
      <manifest>
        <attribute name="Class-Path" value="${sourcerer-mapreduce.jar_classpath}" />
      </manifest>
    </jar>
    <!-- File 'META-INF/INDEX.LIST' from the JAR prevents classpath manifest to be read.-->
    <exec executable="zip">
      <arg line="-d ${dist}/sourcerer-mapreduce.jar META-INF/INDEX.LIST" />
    </exec>
  </target>
  
  <target name="sourcerer-drepo" depends="compile-java-tools-core">
  	<jar destfile="${dist}/sourcerer-drepo.jar" basedir="${build-java-tools-core}">
  	<manifest>
      <attribute name="Class-Path" value="${sourcerer-drepo.jar_classpath}" />
      <attribute name="Main-Class" value="edu.nus.soc.sourcerer.drepo.tools.Main" />
    </manifest>
  	</jar>
    <!-- File 'META-INF/INDEX.LIST' from the JAR prevents classpath manifest to be read.-->
    <exec executable="zip">
      <arg line="-d ${dist}/sourcerer-drepo.jar META-INF/INDEX.LIST" />
    </exec>
  </target>

  <target name="testing" depends="compile-java-tools-core">
    <jar destfile="${dist}/testing.jar" basedir="${build-java-tools-core}">
      <manifest>
        <attribute name="Class-Path" value="${testing.jar_classpath}" />
        <!--<attribute name="Main-Class" value="edu.nus.soc.sourcerer.testing.tools.Main" />-->
      </manifest>
    </jar>
    <!-- File 'META-INF/INDEX.LIST' from the JAR prevents classpath manifest to be read.-->
    <exec executable="zip">
      <arg line="-d ${dist}/testing.jar META-INF/INDEX.LIST" />
    </exec>
  </target>
	
  <target name="file-server" depends="compile-java-tools-core">
    <war destfile="${dist}/file-server.war" webxml="${file-server}/edu/uci/ics/sourcerer/server/file/web.xml">
      <lib dir="${file-server}/edu/uci/ics/sourcerer/server/file">
        <include name="*.properties" />
      </lib>
      <classes dir="${build-java-tools-core}" />
    </war>
  </target>
	
	<target name="famix-server" depends="compile-java-tools-core">
    <war destfile="${dist}/famix-server.war" webxml="${famix-server}/edu/uci/ics/sourcerer/server/famix/web.xml">
      <lib dir="${famix-server}/edu/uci/ics/sourcerer/server/famix">
        <include name="*.properties" />
      </lib>
      <classes dir="${build-java-tools-core}" />
    </war>
  </target>
	
	<target name="code-browser" depends="compile-java-tools-core">
    <war destfile="${dist}/code-browser.war" webxml="${code-browser}/edu/uci/ics/sourcerer/apps/codebrowser/web.xml">
      <lib dir="${code-browser}/edu/uci/ics/sourcerer/apps/codebrowser">
        <include name="*.properties" />
      </lib>
      <classes dir="${build-java-tools-core}" />
    </war>
  </target>
	
	<target name="component-clusterer" depends="compile-java-tools-core">
		<jar destfile="${dist}/component-clusterer.jar" basedir="${build-java-tools-core}">
		  <manifest>
		  	 <attribute name ="Main-Class" value="edu.uci.ics.sourcerer.clusterer.Main" />
			</manifest>
		</jar>
	</target>

  <!-- Talk to sushil about how this works -->
  <target name="similarity-server" depends="compile-machine-learning">
    <war destfile="${dist}/similarity-server.war" webxml="${similarity-server}/edu/uci/ics/sourcerer/server/similarity/web.xml">
      <lib dir="${similarity-server}/edu/uci/ics/sourcerer/server/similarity">
      </lib>
      <lib dir="${lib}">
        <include name="**/mahout-core-*.jar" />
        <include name="**/slf4j-jdk14-1.5.5.jar" />
        <include name="**/slf4j-api-1.5.5.jar" />
        <include name="**/commons-*.jar" />
        <include name="**/uncommons-*.jar" />
        <include name="**/j2ee-*.jar" />
      </lib>
      <lib dir="${build-java-tools-core}">
        <include name="sourcerer-lib.jar" />
      </lib>
      <classes dir="${build-machine-learning}" />
    </war>
  </target>

  <target name="clean-java-tools">
    <delete dir="${build-java-tools-core}" />
    <delete>
      <fileset dir="${dist}">
        <include name="sourcerer-lib.jar" />
        <include name="repo-tools.jar" />
        <include name="sourcerer-db.jar" />
        <include name="file-server.war" />
      	<include name="famix-server.war" />
      </fileset>
    </delete>
  </target>

  <!-- Build the extractor plugin - is asynchronous -->
  <target name="extractor">
    <pde.exportPlugins destination="${build}" exportSource="true" exportType="directory" plugins="Extractor" useJARFormat="true" />
  </target>

  <!-- Repackage the plugin jar file - run after the extractor target -->
  <target name="repackage-extractor" depends="compile-java-tools-core">
    <unjar src="${build}/plugins/Extractor_1.0.0.jar" dest="${build-extractor}" />
    <copy todir="${build-extractor}">
      <fileset dir="${build-java-tools-core}" includes="**/*" />
    </copy>
    <zip destfile="${dist}/Extractor_1.0.0.jar" basedir="${build-extractor}" />
  </target>

  <target name="clean-extractor">
    <delete dir="${build}/plugins" />
    <delete dir="${build-extractor}" />
    <delete>
      <fileset dir="${dist}">
        <include name="Extractor_1.0.0.jar" />
      </fileset>
    </delete>
  </target>

  <target name="scs">
    <war destfile="${dist}/scs.war" webxml="../infrastructure/apps/codesearch/war/WEB-INF/web.xml" basedir="../infrastructure/apps/codesearch/war">
      <lib dir="${lib}">
        <include name="mysql*.jar" />
        <include name="smartgwt*.jar" />
        <include name="commons*.jar" />
        <include name="gwt*.jar" />
      </lib>
      <exclude name="**/.gitignore" />
      <exclude name="evaluation/results/**/*" />
    </war>
  </target>

  <target name="init-search-eval" depends="init">
    <mkdir dir="${build-search-eval}" />
  </target>

  <target name="compile-search-eval" depends="init-search-eval">
    <javac destdir="${build-search-eval}" debug="on" excludes="**/sourcerer/db/**/*.java,**/sourcerer/scs/**/*.java,**/sourcerer/eval/client/**/*.java,**/sourcerer/eval/server/**/*.java">
      <src path="${utilities}" />
      <src path="${repository-manager}" />
      <src path="${model}" />
      <src path="${search-eval}" />
    </javac>
    <copy todir="${build-search-eval}">
      <fileset dir="${utilities}" includes="**/*.java" />
    </copy>
    <copy todir="${build-search-eval}">
      <fileset dir="${repository-manager}" includes="**/*.java" />
    </copy>
    <copy todir="${build-search-eval}">
      <fileset dir="${model}" includes="**/*.java" />
    </copy>
    <copy todir="${build-search-eval}">
      <fileset dir="${search-eval}" includes="**/*.java" />
    </copy>
  </target>

  <target name="search-eval" depends="compile-search-eval">
    <jar destfile="${dist}/search-eval.jar" basedir="${build-search-eval}">
      <manifest>
        <attribute name="Main-Class" value="edu.uci.ics.sourcerer.eval.CalculateTopStats" />
      </manifest>
    </jar>
  </target>

  <target name="clean-search-eval">
    <delete dir="${build-search-eval}" />
    <delete>
      <fileset dir="${dist}">
        <include name="search-eval.jar" />
      </fileset>
    </delete>
  </target>

  <target name="init-search-server" depends="init">
    <mkdir dir="${build-search-server}" />
  </target>

  <target name="compile-search-server" depends="init-search-server, sourcerer-db">
    <javac destdir="${build-search-server}" debug="on">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${lib}">
          <include name="**/apache-solr-core-1.4.0.jar" />
          <include name="**/apache-solr-solrj-1.4.0.jar" />
          <include name="**/apache-solr-dataimporthandler-1.4.0.jar" />
          <include name="**/lucene-core-2.9.1.jar" />
          <include name="**/lucene-snowball-2.9.1.jar" />
          <include name="**/commons-httpclient-*.jar" />
          <include name="**/commons-cli-*.jar" />
          <include name="**/servlet-api.jar" />
          <!-- ml dependencies -->
          <include name="**/mahout-core-0.3-SNAPSHOT.jar" />
          <include name="**/slf4j-api-1.5.5.jar" />
          <include name="**/slf4j-jdk14-1.5.5.jar" />
          <include name="**/commons-*.jar" />
          <include name="**/uncommons-*.jar" />
          <include name="**/mysql-*.jar" />
          <include name="**/j2ee-*.jar" />
        </fileset>
        <fileset dir=".">
          <include name="**/sourcerer-db.jar" />
        </fileset>
      </classpath>
      <src path="${search-server}" />
      <src path="${utilities}" />
      <src path="${machine-learning}" />

    </javac>
    <!--
		<copy todir="${build-search-server}">
			<fileset dir="${utilities}" includes="**/*.java" />
		</copy>
		<copy todir="${build-search-server}">
			<fileset dir="${search-server}" includes="**/*.java" />
		</copy>
		-->
  </target>

  <target name="search-server" depends="compile-search-server">
    <jar destfile="${dist}/sourcerer-search.jar" basedir="${build-search-server}" />
  </target>

  <target name="clean-search-server">
    <delete dir="${build-search-server}" />
    <delete>
      <fileset dir="${dist}">
        <include name="sourcerer-search.jar" />
      </fileset>
    </delete>
  </target>

  <target name="init-core-repomanager" depends="init">
    <mkdir dir="${build-core-repomanager}" />
  </target>

  <target name="compile-core-repomanager" depends="init-core-repomanager">
    <javac destdir="${build-core-repomanager}" debug="on">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${lib}">
          <include name="**/ant-*.jar" />
          <include name="**/commons-cli-*.jar" />
          <include name="**/guice-*.jar" />
          <include name="**/svnclientadapter-*.jar" />
        </fileset>
      </classpath>
      <src path="${core-repository-manager}" />
    </javac>
    <copy todir="${build-core-repomanager}">
      <fileset dir="${core-repository-manager}" includes="**/*.java" />
    </copy>
  </target>

  <target name="core-repomanager" depends="compile-core-repomanager">
    <jar destfile="${dist}/core-repomanager.jar" basedir="${build-core-repomanager}" />
    <copy file="${core-repository-manager}/../scripts/content-fetcher.sh" todir="${dist}" />
    <copy file="${core-repository-manager}/../scripts/repo-folder-creator.sh" todir="${dist}" />
  </target>

  <target name="clean-core-repomanager">
    <delete dir="${build-core-repomanager}" />
    <delete>
      <fileset dir="${dist}">
        <include name="core-repomanager.jar" />
        <include name="content-fetcher.sh" />
        <include name="repo-folder-creator.sh" />
      </fileset>
    </delete>
  </target>

  <target name="init-codecrawler" depends="init">
    <mkdir dir="${build-codecrawler}" />
  </target>

  <target name="compile-codecrawler" depends="init-codecrawler">
    <javac destdir="${build-codecrawler}" debug="on" source="1.5">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${lib}">
          <include name="**/htmlparser-*.jar" />
          <include name="**/log4j-*.jar" />
        </fileset>
      </classpath>
      <src path="${codecrawler}" />
    </javac>
    <copy todir="${build-codecrawler}">
      <fileset dir="${codecrawler}" includes="**/*.java" />
    </copy>
  </target>

  <target name="codecrawler" depends="compile-codecrawler">
    <jar destfile="${dist}/codecrawler.jar" basedir="${build-codecrawler}" />
    <copy file="${codecrawler}/../scripts/run-codecrawler.sh" todir="." />
  </target>

  <target name="clean-codecrawler">
    <delete dir="${build-codecrawler}" />
    <delete>
      <fileset dir="${dist}">
        <include name="codecrawler.jar" />
      </fileset>
    </delete>
  </target>

  <target name="fetch-patch-solr" depends="init">
    <get src="http://www.apache.org/dist/lucene/solr/1.3.0/apache-solr-1.3.0.tgz" dest="${build}/apache-solr-1.3.0.tgz" />
    <untar src="${build}/apache-solr-1.3.0.tgz" dest="${build}" compression="gzip" />
    <move todir="${solr-root}">
      <fileset dir="${build}/apache-solr-1.3.0">
        <include name="**/*" />
      </fileset>
    </move>
    <get src="http://issues.apache.org/jira/secure/attachment/12407410/SOLR-236_collapsing.patch" dest="${solr-root}/SOLR-236_collapsing.patch" />
    <patch patchfile="${solr-root}/SOLR-236_collapsing.patch" strip="0" dir="${solr-root}" />
    <move file="${solr-root}/src/common/org/apache/solr/common/params/CollapseParams.java" todir="${solr-root}/src/java/org/apache/solr/common/params" />
  </target>

  <!-- Construct the test repository -->
  <target name="create-test-repo" depends="compile-java-tools-core,sourcerer-lib,repo-tools">
    <!-- Clear 0/1 -->
    <delete dir="${test-repo}/0/1/content/src" />

    <!-- Setup 0/1 with sourcerer-lib -->
    <copy todir="${test-repo}/0/1/content/src">
      <fileset dir="${utilities}" includes="**/*.java" />
    </copy>
    <copy todir="${test-repo}/0/1/content/src">
      <fileset dir="${repository-manager}" includes="**/*.java" />
    </copy>
    <copy todir="${test-repo}/0/1/content/src">
      <fileset dir="${model}" includes="**/*.java" />
    </copy>
    <copy todir="${test-repo}/0/1/content/src">
      <fileset dir="${database}" includes="**/*.java" />
    </copy>
    <copy todir="${test-repo}/0/1/content/src">
      <fileset dir="${file-server}" includes="**/*.java" />
    </copy>
    <copy todir="${test-repo}/0/1/content/lib">
      <fileset dir="${lib}">
        <include name="servlet-api.jar" />
      </fileset>
    </copy>

    <!-- Clear the old output -->
    <delete dir="${test-repo}/output" />
    <delete dir="${test-repo}/jars" />
    
    <!-- Aggregate the jar repository -->
    <java jar="${dist}/repo-tools.jar" fork="true">
      <arg value="--aggregate-jar-files" />
      <arg value="--input-repo" />
      <arg value="${test-repo}" />
      <arg value="--output" />
      <arg value="${test-repo}/output/agg" />
    </java>

    <!-- Create jar index -->
    <java jar="${dist}/repo-tools.jar" fork="true">
      <arg value="--create-jar-index" />
      <arg value="--input-repo" />
      <arg value="${test-repo}" />
      <arg value="--output" />
      <arg value="${test-repo}/output/index" />
    </java>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build}" />
    <delete dir="${dist}" />
  </target>

  <target name="init-machine-learning" depends="init">
    <mkdir dir="${build-machine-learning}" />
  </target>

  <target name="compile-machine-learning" depends="init-machine-learning, sourcerer-db">
    <javac destdir="${build-machine-learning}" debug="on">
      <src path="${machine-learning}" />
      <src path="${similarity-server}" />
      <src path="${utilities}" />
      <!--
			<src path="${database}" />
			-->
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${lib}">
          <include name="**/mahout-core-*.jar" />
          <include name="**/slf4j-*.jar" />
          <include name="**/commons-*.jar" />
          <include name="**/mahout-core-*.jar" />
          <include name="**/uncommons-*.jar" />
          <include name="**/mysql-*.jar" />
          <include name="**/j2ee-*.jar" />
          <include name="**/servlet-api.jar" />

        </fileset>
        <fileset dir=".">
          <include name="**/sourcerer-db.jar" />
        </fileset>
      </classpath>
    </javac>
    <copy todir="${build-machine-learning}">
      <fileset dir="${machine-learning}" includes="**/*.java" />
    </copy>

    <!--
		<copy todir="${build-machine-learning}">
		      <fileset dir="${database}" includes="**/*.java" />
		 </copy>
		<copy todir="${build-machine-learning}">
		      <fileset dir="${utilities}" includes="**/*.java" />
		</copy>
		-->

  </target>

  <target name="machine-learning" depends="compile-machine-learning">
    <jar destfile="${dist}/sourcerer-ml.jar" basedir="${build-machine-learning}">
    </jar>
  </target>

  <target name="clean-machine-learning">
    <delete dir="${build-machine-learning}" />
    <delete>
      <fileset dir="${dist}">
        <include name="sourcerer-ml.jar" />
      </fileset>
    </delete>
  </target>

	<target name="package-website">
		<zip destfile="${dist}/website.zip" basedir="${website}" />
  </target>
</project>
